# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: run gradle
          command: |
            LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
            [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
            VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            sed -i s/version=.*/version=$VERSION/ gradle.properties
            gradle build


      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle.kts" }}

      - run:
          name: mkdir for artifact
          command: |
            mkdir artifacts
            cp build/libs/uc-historic-data-importer-*.jar ./artifacts/

      - persist_to_workspace:
          root: artifacts
          paths:
            - uc-historic-data-importer-*.jar


  integration-test:
    docker:
      - image: circleci/python:3.7.3
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false

      - run:
          name: "Run the integration test"
          command: |
            sudo pip3 install docker-compose
            sudo apt-get update
            sudo apt-get install openjdk-8-jdk
            ./truststores.sh
            cat gradle/wrapper/gradle-wrapper.properties | grep -v distributionUrl > tmp.txt
            echo 'distributionUrl=https\://services.gradle.org/distributions/gradle-5.5.1-bin.zip' >> tmp.txt
            mv tmp.txt gradle/wrapper/gradle-wrapper.properties
            cat gradle/wrapper/gradle-wrapper.properties
            ./gradlew build
            cd docker/java && docker build --tag dwp-java:latest . && cd -
            cd docker/python && docker build --tag dwp-python:latest . && cd -
            cp settings.gradle.kts gradle.properties docker/gradle
            cd docker/gradle && docker build --tag dwp-gradle:latest . && cd -

            docker-compose build
            docker-compose up -d hbase s3 dks dks-insecure

            S3_READY_REGEX=^Ready\.$
            while ! docker logs s3 2> /dev/null | grep -q $S3_READY_REGEX; do
                echo Waiting for s3.
                sleep 2
            done
            docker-compose up s3-init
            docker-compose up uc-historic-data-importer
            docker-compose up integration-test
  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            set -u
            set -o pipefail
            ls -l ./artifacts
            LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
            [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
            VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} -delete \
              ${VERSION} ./artifacts/

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - integration-test:
         requires:
           - build
      - publish-github-release:
         requires:
           - integration-test
         filters:
           branches:
             only: master
